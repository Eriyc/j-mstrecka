// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../time/models.js";

export class LatestTransaction {
    /**
     * Creates a new LatestTransaction instance.
     * @param {Partial<LatestTransaction>} [$$source = {}] - The source object to create the LatestTransaction.
     */
    constructor($$source = {}) {
        if (!("user_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["user_id"] = "";
        }
        if (!("user_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["user_name"] = "";
        }
        if (!("transaction_date" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["transaction_date"] = null;
        }
        if (!("cumulative_transaction_count" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["cumulative_transaction_count"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LatestTransaction instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {LatestTransaction}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new LatestTransaction(/** @type {Partial<LatestTransaction>} */($$parsedSource));
    }
}

export class TransactionLeaderboard {
    /**
     * Creates a new TransactionLeaderboard instance.
     * @param {Partial<TransactionLeaderboard>} [$$source = {}] - The source object to create the TransactionLeaderboard.
     */
    constructor($$source = {}) {
        if (!("user_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["user_id"] = "";
        }
        if (!("user_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["user_name"] = "";
        }
        if (!("current_rank" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["current_rank"] = 0;
        }
        if (!("rank_change_indicator" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["rank_change_indicator"] = "";
        }
        if (!("total_transaction_count" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["total_transaction_count"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TransactionLeaderboard instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {TransactionLeaderboard}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TransactionLeaderboard(/** @type {Partial<TransactionLeaderboard>} */($$parsedSource));
    }
}
